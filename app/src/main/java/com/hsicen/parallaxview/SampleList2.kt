package com.hsicen.parallaxviewimport android.content.Intentimport android.content.res.Resourcesimport android.graphics.Colorimport android.os.Bundleimport android.util.TypedValueimport android.view.ViewGroupimport android.widget.ImageViewimport androidx.activity.ComponentActivityimport androidx.activity.enableEdgeToEdgeimport androidx.activity.viewModelsimport androidx.appcompat.app.AppCompatActivityimport androidx.appcompat.widget.LinearLayoutCompatimport androidx.compose.foundation.layout.Columnimport androidx.compose.foundation.layout.paddingimport androidx.compose.material3.OutlinedButtonimport androidx.compose.material3.Textimport androidx.compose.runtime.Composableimport androidx.compose.ui.Modifierimport androidx.compose.ui.platform.ComposeViewimport androidx.compose.ui.unit.dpimport androidx.core.view.ViewCompatimport androidx.core.view.WindowInsetsCompatimport com.bumptech.glide.Glideimport com.google.android.material.imageview.ShapeableImageViewimport com.google.android.material.shape.ShapeAppearanceModelclass SampleList2 : AppCompatActivity() {    companion object {        fun start(act: ComponentActivity) {            act.startActivity(Intent(act, SampleList2::class.java))        }    }    private val mViewModel by viewModels<SimpleViewModel>()    private val mRoot by lazy {        LinearLayoutCompat(this).apply {            orientation = LinearLayoutCompat.VERTICAL        }    }    private val mParallaxView by lazy {        ParallaxView(this).apply {            setBackgroundColor(Color.GRAY)        }    }    private val mAdapter by lazy {        object : ParallaxViewAdapter {            override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ParallaxViewHolder {                return ParallaxViewHolder(                    ShapeableImageView(parent.context).apply {                        val w = 120.dp2px                        val h = 150.dp2px                        val radius = 15f.dp2px                        layoutParams = ViewGroup.MarginLayoutParams(w, h)                        shapeAppearanceModel = ShapeAppearanceModel()                            .withCornerSize(radius)                        scaleType = ImageView.ScaleType.CENTER_CROP                    })            }            override fun onBindViewHolder(                holder: ParallaxViewHolder,                position: Int,                data: ParallaxData            ) {                Glide.with(holder.root)                    .load(data.img)                    .into(holder.root as ImageView)            }        }    }    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        enableEdgeToEdge()        setContentView(            mRoot, ViewGroup.MarginLayoutParams(                ViewGroup.LayoutParams.MATCH_PARENT,                ViewGroup.LayoutParams.MATCH_PARENT            )        )        ViewCompat.setOnApplyWindowInsetsListener(mRoot) { v, insets ->            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())            v.setPadding(systemBars.left, systemBars.top * 2, systemBars.right, systemBars.bottom)            insets        }        mRoot.addView(mParallaxView)        mRoot.addView(ComposeView(this).apply {            setContent { MenuList() }        })        mParallaxView.addConfig(            ParallaxViewConfig(                itemMargin = 10.dp2px,                autoLoop = true,                reverse = false,                direction = ParallaxDirection.Forward,                orientation = LinearLayoutCompat.VERTICAL,                parallaxAdapter = mAdapter            )        ).build()        lifecycle.addObserver(mParallaxView)        mParallaxView.updateData(mViewModel.provideData())    }    @Composable    fun MenuList() {        Column(modifier = Modifier.padding(16.dp)) {            OutlinedButton(onClick = {                mParallaxView.toggleLoop()            }, modifier = Modifier.padding(top = 6.dp)) {                Text(                    text = "循环状态改变",                    modifier = Modifier.padding(6.dp)                )            }            OutlinedButton(onClick = {                mParallaxView.reverseLoop()            }, modifier = Modifier.padding(top = 6.dp)) {                Text(                    text = "循环方向改变",                    modifier = Modifier.padding(6.dp)                )            }            OutlinedButton(onClick = {                mParallaxView.toggleReverse()            }, modifier = Modifier.padding(top = 6.dp)) {                Text(                    text = "同步方向改变",                    modifier = Modifier.padding(6.dp)                )            }        }    }    override fun onDestroy() {        lifecycle.removeObserver(mParallaxView)        super.onDestroy()    }    inline val Int.dp2px: Int        get() = TypedValue.applyDimension(            TypedValue.COMPLEX_UNIT_DIP, this * 1.0f, Resources.getSystem().displayMetrics        ).toInt()    private inline val Float.dp2px: Float        get() = TypedValue.applyDimension(            TypedValue.COMPLEX_UNIT_DIP, this, Resources.getSystem().displayMetrics        )}