package com.hsicen.parallaxviewimport android.annotation.SuppressLintimport android.content.Contextimport android.content.res.Resourcesimport android.graphics.Rectimport android.util.AttributeSetimport android.util.TypedValueimport android.view.Viewimport android.view.ViewGroupimport android.view.ViewGroup.LayoutParams.MATCH_PARENTimport android.view.ViewGroup.LayoutParams.WRAP_CONTENTimport android.widget.LinearLayoutimport androidx.recyclerview.widget.LinearLayoutManagerimport androidx.recyclerview.widget.RecyclerViewimport com.google.android.material.imageview.ShapeableImageViewclass ParallaxView @JvmOverloads constructor(  context: Context,  attrs: AttributeSet? = null,  defStyleAttr: Int = 0) : LinearLayout(context, attrs, defStyleAttr) {  companion object {    private const val RV_COUNT = 2  }  private val mDatas = ArrayList<ParallaxData>()  private val mScrollListeners = arrayOfNulls<RecyclerView.OnScrollListener>(RV_COUNT)  private val mDecoration by lazy {    object : RecyclerView.ItemDecoration() {      val margin = 5.dp2px      override fun getItemOffsets(        outRect: Rect,        view: View,        parent: RecyclerView,        state: RecyclerView.State      ) {        super.getItemOffsets(outRect, view, parent, state)        val manager = parent.layoutManager ?: return        val rlp = (view.layoutParams as? RecyclerView.LayoutParams) ?: return        val position = rlp.viewLayoutPosition        val count = manager.itemCount        if (position == RecyclerView.NO_POSITION || 0 == count) return        outRect[margin, margin, margin] = margin      }    }  }  private val mAdapter1 by lazy {    object : RecyclerView.Adapter<ParallaxViewHolder>() {      override fun getItemCount(): Int = mDatas.size * 2000      override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ParallaxViewHolder {        return ParallaxViewHolder(          ShapeableImageView(parent.context).apply {          }).apply {          root.setOnClickListener {            if (layoutPosition == RecyclerView.NO_POSITION) return@setOnClickListener            val pos = (layoutPosition * 2) % mDatas.size            mDatas.getOrNull(pos)?.let { _ ->            }          }        }      }      override fun onBindViewHolder(holder: ParallaxViewHolder, position: Int) {        val pos = position * 2        val item = mDatas[pos % mDatas.size]      }      override fun onViewAttachedToWindow(holder: ParallaxViewHolder) {        super.onViewAttachedToWindow(holder)        if (holder.layoutPosition == RecyclerView.NO_POSITION) return        val pos = (holder.layoutPosition * 2) % mDatas.size        mDatas.getOrNull(pos)?.let { _ ->        }      }      override fun onViewDetachedFromWindow(holder: ParallaxViewHolder) {        super.onViewDetachedFromWindow(holder)        if (holder.layoutPosition == RecyclerView.NO_POSITION) return        val pos = (holder.layoutPosition * 2) % mDatas.size        mDatas.getOrNull(pos)?.let { _ ->        }      }    }  }  private val mAdapter2 by lazy {    object : RecyclerView.Adapter<ParallaxViewHolder>() {      override fun getItemCount(): Int = mDatas.size * 2000      override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ParallaxViewHolder {        return ParallaxViewHolder(          ShapeableImageView(parent.context).apply {          }).apply {          root.setOnClickListener {            if (layoutPosition == RecyclerView.NO_POSITION) return@setOnClickListener            val pos = (layoutPosition * 2 + 1) % mDatas.size            mDatas.getOrNull(pos)?.let { _ ->            }          }        }      }      override fun onBindViewHolder(holder: ParallaxViewHolder, position: Int) {        val pos = position * 2        val item = mDatas[(position * 2 + 1) % mDatas.size]      }      override fun onViewAttachedToWindow(holder: ParallaxViewHolder) {        super.onViewAttachedToWindow(holder)        if (holder.layoutPosition == RecyclerView.NO_POSITION) return        val pos = (holder.layoutPosition * 2 + 1) % mDatas.size        mDatas.getOrNull(pos)?.let { _ ->        }      }      override fun onViewDetachedFromWindow(holder: ParallaxViewHolder) {        super.onViewDetachedFromWindow(holder)        if (holder.layoutPosition == RecyclerView.NO_POSITION) return        val pos = (holder.layoutPosition * 2 + 1) % mDatas.size        mDatas.getOrNull(pos)?.let { _ ->        }      }    }  }  private val mRv1 by lazy {    RecyclerView(context).apply {      adapter = mAdapter1      setHasFixedSize(true)      itemAnimator = null      isNestedScrollingEnabled = false      layoutParams = ViewGroup.LayoutParams(MATCH_PARENT, WRAP_CONTENT)      layoutManager = LinearLayoutManager(context, RecyclerView.HORIZONTAL, false)      addItemDecoration(mDecoration)      mScrollListeners[0]?.let { addOnScrollListener(it) }    }  }  private val mRv2 by lazy {    RecyclerView(context).apply {      adapter = mAdapter2      setHasFixedSize(true)      itemAnimator = null      isNestedScrollingEnabled = false      layoutParams = ViewGroup.LayoutParams(MATCH_PARENT, WRAP_CONTENT)      layoutManager = LinearLayoutManager(context, RecyclerView.HORIZONTAL, false)      addItemDecoration(mDecoration)      mScrollListeners[1]?.let { addOnScrollListener(it) }    }  }  init {    orientation = VERTICAL    isMotionEventSplittingEnabled = false    mScrollListeners[0] = object : RecyclerView.OnScrollListener() {      override fun onScrolled(recyclerView: RecyclerView, dx: Int, dy: Int) {        super.onScrolled(recyclerView, dx, dy)        mScrollListeners[1]?.let { mRv2.removeOnScrollListener(it) }        mRv2.scrollBy(dx, dy)        mScrollListeners[1]?.let { mRv2.addOnScrollListener(it) }      }    }    mScrollListeners[1] = object : RecyclerView.OnScrollListener() {      override fun onScrolled(recyclerView: RecyclerView, dx: Int, dy: Int) {        super.onScrolled(recyclerView, dx, dy)        mScrollListeners[0]?.let { mRv1.removeOnScrollListener(it) }        mRv1.scrollBy(dx, dy)        mScrollListeners[0]?.let { mRv1.addOnScrollListener(it) }      }    }    addView(mRv1)    addView(mRv2)  }  @SuppressLint("NotifyDataSetChanged")  fun updateData(list: List<ParallaxData>) {    fun setNewInstance(list: List<ParallaxData>) {      if (list == mDatas) return      mDatas.clear()      mDatas.addAll(list)      mAdapter1.notifyDataSetChanged()      mAdapter2.notifyDataSetChanged()    }    setNewInstance(list)    scrollToLast()  }  private fun scrollToLast() {    val offsetPos = mDatas.size * 1000    (mRv1.layoutManager as? LinearLayoutManager)      ?.scrollToPositionWithOffset(offsetPos + 1, 80.dp2px)    (mRv2.layoutManager as? LinearLayoutManager)      ?.scrollToPositionWithOffset(offsetPos, 46.dp2px)  }  data class ParallaxData(val img: String)  class ParallaxViewHolder(val root: View) : RecyclerView.ViewHolder(root)  /******====== Tools ======******/  private inline val Int.dp2px: Int    get() = TypedValue.applyDimension(      TypedValue.COMPLEX_UNIT_DIP, this * 1.0f, Resources.getSystem().displayMetrics    ).toInt()  private inline val Float.dp2px: Float    get() = TypedValue.applyDimension(      TypedValue.COMPLEX_UNIT_DIP, this, Resources.getSystem().displayMetrics    )}